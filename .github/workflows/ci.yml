name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18.x'
  MONGODB_VERSION: '6.0'

jobs:
  # Backend Tests
  backend-test:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'

    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: Create test environment file
      working-directory: ./backend
      run: |
        echo "NODE_ENV=test" > .env.test
        echo "MONGODB_URI=mongodb://localhost:27017/comida-africana-test" >> .env.test
        echo "JWT_SECRET=test-secret-key-for-testing-purposes-only" >> .env.test
        echo "PORT=5001" >> .env.test

    - name: Wait for MongoDB
      run: |
        until mongosh --eval "print(\"MongoDB is ready\")" > /dev/null 2>&1; do
          echo "Waiting for MongoDB..."
          sleep 2
        done

    - name: Run backend linting
      working-directory: ./backend
      run: npm run lint

    - name: Run backend tests
      working-directory: ./backend
      run: npm test
      env:
        NODE_ENV: test

    - name: Run backend test coverage
      working-directory: ./backend
      run: npm run test:coverage
      env:
        NODE_ENV: test

    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage

  # Frontend Tests
  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run frontend linting
      working-directory: ./frontend
      run: npm run lint

    - name: Run frontend tests
      working-directory: ./frontend
      run: npm test

    - name: Run frontend test coverage
      working-directory: ./frontend
      run: npm run test:coverage

    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/dist

  # Security Audit
  security-audit:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Run backend security audit
      working-directory: ./backend
      run: npm audit --audit-level=high

    - name: Run frontend security audit
      working-directory: ./frontend
      run: npm audit --audit-level=high

  # Code Quality
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies
      run: |
        cd backend && npm ci
        cd ../frontend && npm ci

    - name: Run SonarQube Scan
      uses: sonarqube-quality-gate-action@master
      with:
        scanMetadataReportFile: target/sonar/report-task.txt
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # End-to-End Tests
  e2e-test:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies
      run: |
        cd backend && npm ci
        cd ../frontend && npm ci

    - name: Start backend server
      working-directory: ./backend
      run: |
        echo "NODE_ENV=test" > .env.test
        echo "MONGODB_URI=mongodb://localhost:27017/comida-africana-e2e" >> .env.test
        echo "JWT_SECRET=e2e-test-secret" >> .env.test
        echo "PORT=5001" >> .env.test
        npm start &
      env:
        NODE_ENV: test

    - name: Build and serve frontend
      working-directory: ./frontend
      run: |
        npm run build
        npx serve -s dist -l 3000 &

    - name: Wait for services
      run: |
        npx wait-on http://localhost:5001/api/health
        npx wait-on http://localhost:3000

    - name: Run E2E tests
      run: npx playwright test

  # Deploy to staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security-audit, e2e-test]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Build frontend
      working-directory: ./frontend
      run: |
        npm ci
        npm run build

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here

  # Deploy to production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security-audit, e2e-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://comida-africana.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Build frontend
      working-directory: ./frontend
      run: |
        npm ci
        npm run build

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here

    - name: Post-deployment health check
      run: |
        curl -f https://comida-africana.com/api/health || exit 1

  # Cleanup
  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Cleanup artifacts
      run: |
        echo "Cleaning up temporary files and artifacts..."
        # Add cleanup commands here